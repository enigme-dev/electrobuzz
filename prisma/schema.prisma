datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique /// @encrypted
  emailHash     String?       @unique /// @encryption:hash(email)
  emailVerified DateTime?
  phone         String?       @unique /// @encrypted
  phoneHash     String?       @unique /// @encryption:hash(phone)
  phoneVerified Boolean       @default(false)
  image         String?
  isAdmin       Boolean       @default(false)

  addresses     Address[]
  merchant      Merchant?
  appointments  Appointment[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  addressId       String        @id @default(cuid())
  addressDetail   String        /// @encrypted
  addressZipCode  String        /// @encrypted
  addressCity     String
  addressProvince String

  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  appointments    Appointment[]
}

model Merchant {
  merchantId        String            @id @default(cuid())
  merchantName      String
  merchantDesc      String
  merchantPhotoUrl  String
  merchantCity      String
  merchantProvince  String
  merchantCategory  String[]
  merchantRating    Float?
  merchantReviewCt  Int?
  merchantVerified  Boolean           @default(false)
  merchantAvailable Boolean?
  merchantCreatedAt DateTime          @default(now())
  
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  merchantAlbums    MerchantAlbum[]
  merchantIdentity  MerchantIdentity?
  appointments      Appointment[]
  reviews           Review[]
}

model MerchantAlbum {
  merchantAlbumId String   @id @default(cuid())
  albumPhotoUrl   String

  merchantId      String
  merchant        Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

model MerchantIdentity {
  merchantIdentityId String   @id @default(cuid())
  identityKtp        String?
  identitySkck       String?
  identityCert       String?
  identityStatus     String?

  merchantId         String   @unique
  merchant           Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)
}

model Appointment {
  apptId        String   @id @default(cuid())
  apptPhotoUrl  String?
  apptComplain  String
  apptSchedule  DateTime
  apptStatus    String
  apptReason    String?
  apptPrice     Int?
  apptCreatedAt DateTime @default(now())

  userId        String
  user          User     @relation(fields: [userId], references: [id])
  merchantId    String
  merchant      Merchant @relation(fields: [merchantId], references: [merchantId])
  addressId     String
  address       Address  @relation(fields: [addressId], references: [addressId])

  review Review?
}

model Review {
  reviewId    String      @id @default(cuid())
  reviewStars Float
  reviewBody  String

  userId      String
  user        User        @relation(fields: [userId], references: [id])
  merchantId  String
  merchant    Merchant    @relation(fields: [merchantId], references: [merchantId])
  apptId      String      @unique
  appointment Appointment @relation(fields: [apptId], references: [apptId])
}